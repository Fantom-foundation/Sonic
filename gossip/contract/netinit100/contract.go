// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package netinit100

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sealedEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"_sfc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_driver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_evmWriter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initializeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// InitializeAll is a paid mutator transaction binding the contract method 0xc80e1513.
//
// Solidity: function initializeAll(uint256 sealedEpoch, uint256 totalSupply, address _sfc, address _auth, address _driver, address _evmWriter, address _owner) returns()
func (_Contract *ContractTransactor) InitializeAll(opts *bind.TransactOpts, sealedEpoch *big.Int, totalSupply *big.Int, _sfc common.Address, _auth common.Address, _driver common.Address, _evmWriter common.Address, _owner common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "initializeAll", sealedEpoch, totalSupply, _sfc, _auth, _driver, _evmWriter, _owner)
}

// InitializeAll is a paid mutator transaction binding the contract method 0xc80e1513.
//
// Solidity: function initializeAll(uint256 sealedEpoch, uint256 totalSupply, address _sfc, address _auth, address _driver, address _evmWriter, address _owner) returns()
func (_Contract *ContractSession) InitializeAll(sealedEpoch *big.Int, totalSupply *big.Int, _sfc common.Address, _auth common.Address, _driver common.Address, _evmWriter common.Address, _owner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.InitializeAll(&_Contract.TransactOpts, sealedEpoch, totalSupply, _sfc, _auth, _driver, _evmWriter, _owner)
}

// InitializeAll is a paid mutator transaction binding the contract method 0xc80e1513.
//
// Solidity: function initializeAll(uint256 sealedEpoch, uint256 totalSupply, address _sfc, address _auth, address _driver, address _evmWriter, address _owner) returns()
func (_Contract *ContractTransactorSession) InitializeAll(sealedEpoch *big.Int, totalSupply *big.Int, _sfc common.Address, _auth common.Address, _driver common.Address, _evmWriter common.Address, _owner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.InitializeAll(&_Contract.TransactOpts, sealedEpoch, totalSupply, _sfc, _auth, _driver, _evmWriter, _owner)
}

var ContractBinRuntime = "0x608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063c80e15131461002d575b5f5ffd5b61004061003b36600461079e565b610042565b005b60405163c0c53b8b60e01b81526001600160a01b0385811660048301528381166024830152828116604483015284169063c0c53b8b906064015f604051808303815f87803b158015610092575f5ffd5b505af11580156100a4573d5f5f3e3d5ffd5b505060405163c0c53b8b60e01b81526001600160a01b038881166004830152868116602483015284811660448301528716925063c0c53b8b91506064015f604051808303815f87803b1580156100f8575f5ffd5b505af115801561010a573d5f5f3e3d5ffd5b505050505f3060405161011c9061077a565b6001600160a01b039091168152602001604051809103905ff080158015610145573d5f5f3e3d5ffd5b5060405163866c4b1760e01b81526969e10de76676d080000060048201529091506001600160a01b0382169063866c4b17906024015f604051808303815f87803b158015610191575f5ffd5b505af11580156101a3573d5f5f3e3d5ffd5b50505050806001600160a01b03166381ffcdf16101c5670de0b6b3a764000090565b6101d090601061081d565b6040518263ffffffff1660e01b81526004016101ee91815260200190565b5f604051808303815f87803b158015610205575f5ffd5b505af1158015610217573d5f5f3e3d5ffd5b50505050806001600160a01b0316632ee71132606461023b670de0b6b3a764000090565b61024690600f61081d565b6102509190610846565b6040518263ffffffff1660e01b815260040161026e91815260200190565b5f604051808303815f87803b158015610285575f5ffd5b505af1158015610297573d5f5f3e3d5ffd5b50505050806001600160a01b0316632bb9fe8d60646102bb670de0b6b3a764000090565b6102c690601461081d565b6102d09190610846565b6040518263ffffffff1660e01b81526004016102ee91815260200190565b5f604051808303815f87803b158015610305575f5ffd5b505af1158015610317573d5f5f3e3d5ffd5b50505050806001600160a01b031663f8d5177e606461033b670de0b6b3a764000090565b61034690600a61081d565b6103509190610846565b6040518263ffffffff1660e01b815260040161036e91815260200190565b5f604051808303815f87803b158015610385575f5ffd5b505af1158015610397573d5f5f3e3d5ffd5b5050604051634783c5fd60e11b8152600360048201526001600160a01b0384169250638f078bfa91506024015f604051808303815f87803b1580156103da575f5ffd5b505af11580156103ec573d5f5f3e3d5ffd5b5050604051631154d9a960e21b815262093a8060048201526001600160a01b038416925063455366a491506024015f604051808303815f87803b158015610431575f5ffd5b505af1158015610443573d5f5f3e3d5ffd5b505060405163b6d9edd560e01b8152672508fab977b917d060048201526001600160a01b038416925063b6d9edd591506024015f604051808303815f87803b15801561048d575f5ffd5b505af115801561049f573d5f5f3e3d5ffd5b5050604051630c691d7760e31b81526206978060048201526001600160a01b0384169250636348ebb891506024015f604051808303815f87803b1580156104e4575f5ffd5b505af11580156104f6573d5f5f3e3d5ffd5b5050604051631742747360e11b81526103e860048201526001600160a01b0384169250632e84e8e691506024015f604051808303815f87803b15801561053a575f5ffd5b505af115801561054c573d5f5f3e3d5ffd5b5050604051634332686760e01b8152621e848060048201526001600160a01b0384169250634332686791506024015f604051808303815f87803b158015610591575f5ffd5b505af11580156105a3573d5f5f3e3d5ffd5b50506040516369fa46df60e11b8152610e1060048201526001600160a01b038416925063d3f48dbe91506024015f604051808303815f87803b1580156105e7575f5ffd5b505af11580156105f9573d5f5f3e3d5ffd5b50506040516312b6e2b960e11b8152606460048201526001600160a01b038416925063256dc57291506024015f604051808303815f87803b15801561063c575f5ffd5b505af115801561064e573d5f5f3e3d5ffd5b505060405163165e263960e01b81525f60048201526001600160a01b038416925063165e263991506024015f604051808303815f87803b158015610690575f5ffd5b505af11580156106a2573d5f5f3e3d5ffd5b505060405163f2fde38b60e01b81526001600160a01b0385811660048301528416925063f2fde38b91506024015f604051808303815f87803b1580156106e6575f5ffd5b505af11580156106f8573d5f5f3e3d5ffd5b5050604051633fbfd4df60e01b8152600481018b9052602481018a90526001600160a01b0388811660448301528481166064830152858116608483015289169250633fbfd4df915060a4015f604051808303815f87803b15801561075a575f5ffd5b505af115801561076c573d5f5f3e3d5ffd5b505050505050505050505050565b610da58061086683390190565b6001600160a01b038116811461079b575f5ffd5b50565b5f5f5f5f5f5f5f60e0888a0312156107b4575f5ffd5b873596506020880135955060408801356107cd81610787565b945060608801356107dd81610787565b935060808801356107ed81610787565b925060a08801356107fd81610787565b915060c088013561080d81610787565b8091505092959891949750929550565b808202811582820484141761084057634e487b7160e01b5f52601160045260245ffd5b92915050565b5f8261086057634e487b7160e01b5f52601260045260245ffd5b50049056fe608060405234801561000f575f5ffd5b50604051610da5380380610da583398101604081905261002e9161022d565b5f516020610d855f395f51905f52805468010000000000000000810460ff1615906001600160401b03165f811580156100645750825b90505f826001600160401b0316600114801561007f5750303b155b90508115801561008d575080155b156100ab5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b031916600117855583156100d957845460ff60401b1916680100000000000000001785555b6100e286610133565b831561012857845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505061025a565b61013b610147565b61014481610184565b50565b5f516020610d855f395f51905f525468010000000000000000900460ff1661018257604051631afcd79f60e31b815260040160405180910390fd5b565b61018c610147565b6001600160a01b0381166101b957604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b610144817f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f6020828403121561023d575f5ffd5b81516001600160a01b0381168114610253575f5ffd5b9392505050565b610b1e806102675f395ff3fe608060405234801561000f575f5ffd5b50600436106101db575f3560e01c8063650acd6611610109578063b6d9edd51161009e578063d3f48dbe1161006e578063d3f48dbe146103d6578063d9a7c1f9146103e9578063f2fde38b146103f2578063f8d5177e14610405575f5ffd5b8063b6d9edd5146103a9578063b82b8427146103bc578063c5f530af146103c5578063c74dd621146103cd575f5ffd5b80638da5cb5b116100d95780638da5cb5b1461034a5780638f078bfa1461038457806394c3e91414610397578063a7786515146103a0575f5ffd5b8063650acd6614610313578063715018a61461031c57806381ffcdf114610324578063866c4b1714610337575f5ffd5b80632e84e8e61161017f578063433268671161014f57806343326867146102d1578063455366a4146102e45780635a68f01a146102f75780636348ebb814610300575f5ffd5b80632e84e8e61461027d5780632ee71132146102905780633a3ef66c146102a35780633fa22548146102ac575f5ffd5b80632265f284116101ba5780632265f28414610245578063256dc5721461024e5780632bb9fe8d146102615780632c8c36a514610274575f5ffd5b8062cc7f83146101df578063165e2639146101fb5780631c25433714610210575b5f5ffd5b6101e860095481565b6040519081526020015b60405180910390f35b61020e610209366004610a12565b610418565b005b600c5461022c90640100000000900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101f2565b6101e860015481565b61020e61025c366004610a40565b610499565b61020e61026f366004610a63565b61050f565b6101e8600b5481565b61020e61028b366004610a63565b61054f565b61020e61029e366004610a63565b6105a2565b6101e8600a5481565b600c546102bc9063ffffffff1681565b60405163ffffffff90911681526020016101f2565b61020e6102df366004610a63565b6105e2565b61020e6102f2366004610a63565b610638565b6101e860085481565b61020e61030e366004610a63565b61068d565b6101e860055481565b61020e6106e2565b61020e610332366004610a63565b6106f5565b61020e610345366004610a63565b61075e565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546040516001600160a01b0390911681526020016101f2565b61020e610392366004610a63565b6107c1565b6101e860045481565b6101e860025481565b61020e6103b7366004610a63565b610812565b6101e860065481565b6101e85f5481565b6101e860035481565b61020e6103e4366004610a63565b610872565b6101e860075481565b61020e610400366004610a7a565b6108c5565b61020e610413366004610a63565b610907565b610420610947565b600a610435670de0b6b3a76400006009610aa0565b61043f9190610ac9565b8167ffffffffffffffff16111561046957604051632ad907fb60e01b815260040160405180910390fd5b600c805467ffffffffffffffff909216640100000000026bffffffffffffffff0000000019909216919091179055565b6104a1610947565b600a8163ffffffff1610156104c957604051639a721da360e01b815260040160405180910390fd5b620156308163ffffffff1611156104f357604051632ad907fb60e01b815260040160405180910390fd5b600c805463ffffffff191663ffffffff92909216919091179055565b610517610947565b61052a6002670de0b6b3a7640000610ac9565b81111561054a57604051632ad907fb60e01b815260040160405180910390fd5b600355565b610557610947565b606481101561057957604051639a721da360e01b815260040160405180910390fd5b620f424081111561059d57604051632ad907fb60e01b815260040160405180910390fd5b600855565b6105aa610947565b6105bd6002670de0b6b3a7640000610ac9565b8111156105dd57604051632ad907fb60e01b815260040160405180910390fd5b600255565b6105ea610947565b620f424081101561060e57604051639a721da360e01b815260040160405180910390fd5b631dcd650081111561063357604051632ad907fb60e01b815260040160405180910390fd5b600a55565b610640610947565b6201518081101561066457604051639a721da360e01b815260040160405180910390fd5b62278d0081111561068857604051632ad907fb60e01b815260040160405180910390fd5b600655565b610695610947565b620151808110156106b957604051639a721da360e01b815260040160405180910390fd5b620d2f008111156106dd57604051632ad907fb60e01b815260040160405180910390fd5b600955565b6106ea610947565b6106f35f6109a2565b565b6106fd610947565b670de0b6b3a764000081101561072657604051639a721da360e01b815260040160405180910390fd5b610739670de0b6b3a7640000601f610aa0565b81111561075957604051632ad907fb60e01b815260040160405180910390fd5b600155565b610766610947565b69152d02c7e14af680000081101561079157604051639a721da360e01b815260040160405180910390fd5b6a084595161401484a0000008111156107bd57604051632ad907fb60e01b815260040160405180910390fd5b5f55565b6107c9610947565b60028110156107eb57604051639a721da360e01b815260040160405180910390fd5b606481111561080d57604051632ad907fb60e01b815260040160405180910390fd5b600555565b61081a610947565b6706f05b59d3b2000081101561084357604051639a721da360e01b815260040160405180910390fd5b6801bc16d674ec80000081111561086d57604051632ad907fb60e01b815260040160405180910390fd5b600755565b61087a610947565b606481101561089c57604051639a721da360e01b815260040160405180910390fd5b620d2f008111156108c057604051632ad907fb60e01b815260040160405180910390fd5b600b55565b6108cd610947565b6001600160a01b0381166108fb57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b610904816109a2565b50565b61090f610947565b6109226002670de0b6b3a7640000610ac9565b81111561094257604051632ad907fb60e01b815260040160405180910390fd5b600455565b336109797f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146106f35760405163118cdaa760e01b81523360048201526024016108f2565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f60208284031215610a22575f5ffd5b813567ffffffffffffffff81168114610a39575f5ffd5b9392505050565b5f60208284031215610a50575f5ffd5b813563ffffffff81168114610a39575f5ffd5b5f60208284031215610a73575f5ffd5b5035919050565b5f60208284031215610a8a575f5ffd5b81356001600160a01b0381168114610a39575f5ffd5b8082028115828204841417610ac357634e487b7160e01b5f52601160045260245ffd5b92915050565b5f82610ae357634e487b7160e01b5f52601260045260245ffd5b50049056fea26469706673582212200646e71ed0e0870200e7f9b32373d9ffff0fb2fd90992f00c4311af9c3062d2064736f6c634300081b0033f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a264697066735822122095ac9dde3f8d0182644b41c059d888d7ca0ab4b17d9b01171a4726f810a981a764736f6c634300081b0033"
