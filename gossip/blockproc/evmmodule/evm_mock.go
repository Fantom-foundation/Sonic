// Code generated by MockGen. DO NOT EDIT.
// Source: evm_test.go
//
// Generated by this command:
//
//	mockgen -source evm_test.go -destination evm_mock.go -package evmmodule
//

// Package evmmodule is a generated GoMock package.
package evmmodule

import (
	reflect "reflect"

	witness "github.com/Fantom-foundation/Carmen/go/common/witness"
	state "github.com/Fantom-foundation/go-opera/inter/state"
	common "github.com/ethereum/go-ethereum/common"
	stateless "github.com/ethereum/go-ethereum/core/stateless"
	tracing "github.com/ethereum/go-ethereum/core/tracing"
	types "github.com/ethereum/go-ethereum/core/types"
	params "github.com/ethereum/go-ethereum/params"
	utils "github.com/ethereum/go-ethereum/trie/utils"
	uint256 "github.com/holiman/uint256"
	gomock "go.uber.org/mock/gomock"
)

// MockstateDB is a mock of stateDB interface.
type MockstateDB struct {
	ctrl     *gomock.Controller
	recorder *MockstateDBMockRecorder
}

// MockstateDBMockRecorder is the mock recorder for MockstateDB.
type MockstateDBMockRecorder struct {
	mock *MockstateDB
}

// NewMockstateDB creates a new mock instance.
func NewMockstateDB(ctrl *gomock.Controller) *MockstateDB {
	mock := &MockstateDB{ctrl: ctrl}
	mock.recorder = &MockstateDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstateDB) EXPECT() *MockstateDBMockRecorder {
	return m.recorder
}

// AddAddressToAccessList mocks base method.
func (m *MockstateDB) AddAddressToAccessList(addr common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddressToAccessList", addr)
}

// AddAddressToAccessList indicates an expected call of AddAddressToAccessList.
func (mr *MockstateDBMockRecorder) AddAddressToAccessList(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressToAccessList", reflect.TypeOf((*MockstateDB)(nil).AddAddressToAccessList), addr)
}

// AddBalance mocks base method.
func (m *MockstateDB) AddBalance(arg0 common.Address, arg1 *uint256.Int, arg2 tracing.BalanceChangeReason) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBalance", arg0, arg1, arg2)
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockstateDBMockRecorder) AddBalance(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockstateDB)(nil).AddBalance), arg0, arg1, arg2)
}

// AddLog mocks base method.
func (m *MockstateDB) AddLog(arg0 *types.Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLog", arg0)
}

// AddLog indicates an expected call of AddLog.
func (mr *MockstateDBMockRecorder) AddLog(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLog", reflect.TypeOf((*MockstateDB)(nil).AddLog), arg0)
}

// AddPreimage mocks base method.
func (m *MockstateDB) AddPreimage(arg0 common.Hash, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPreimage", arg0, arg1)
}

// AddPreimage indicates an expected call of AddPreimage.
func (mr *MockstateDBMockRecorder) AddPreimage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPreimage", reflect.TypeOf((*MockstateDB)(nil).AddPreimage), arg0, arg1)
}

// AddRefund mocks base method.
func (m *MockstateDB) AddRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRefund", arg0)
}

// AddRefund indicates an expected call of AddRefund.
func (mr *MockstateDBMockRecorder) AddRefund(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefund", reflect.TypeOf((*MockstateDB)(nil).AddRefund), arg0)
}

// AddSlotToAccessList mocks base method.
func (m *MockstateDB) AddSlotToAccessList(addr common.Address, slot common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSlotToAccessList", addr, slot)
}

// AddSlotToAccessList indicates an expected call of AddSlotToAccessList.
func (mr *MockstateDBMockRecorder) AddSlotToAccessList(addr, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlotToAccessList", reflect.TypeOf((*MockstateDB)(nil).AddSlotToAccessList), addr, slot)
}

// AddressInAccessList mocks base method.
func (m *MockstateDB) AddressInAccessList(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressInAccessList", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddressInAccessList indicates an expected call of AddressInAccessList.
func (mr *MockstateDBMockRecorder) AddressInAccessList(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressInAccessList", reflect.TypeOf((*MockstateDB)(nil).AddressInAccessList), addr)
}

// BeginBlock mocks base method.
func (m *MockstateDB) BeginBlock(number uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginBlock", number)
}

// BeginBlock indicates an expected call of BeginBlock.
func (mr *MockstateDBMockRecorder) BeginBlock(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginBlock", reflect.TypeOf((*MockstateDB)(nil).BeginBlock), number)
}

// Commit mocks base method.
func (m *MockstateDB) Commit(deleteEmptyObjects bool) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", deleteEmptyObjects)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockstateDBMockRecorder) Commit(deleteEmptyObjects any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockstateDB)(nil).Commit), deleteEmptyObjects)
}

// Copy mocks base method.
func (m *MockstateDB) Copy() state.StateDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(state.StateDB)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockstateDBMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockstateDB)(nil).Copy))
}

// CreateAccount mocks base method.
func (m *MockstateDB) CreateAccount(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAccount", arg0)
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockstateDBMockRecorder) CreateAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockstateDB)(nil).CreateAccount), arg0)
}

// CreateContract mocks base method.
func (m *MockstateDB) CreateContract(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateContract", arg0)
}

// CreateContract indicates an expected call of CreateContract.
func (mr *MockstateDBMockRecorder) CreateContract(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContract", reflect.TypeOf((*MockstateDB)(nil).CreateContract), arg0)
}

// Empty mocks base method.
func (m *MockstateDB) Empty(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty.
func (mr *MockstateDBMockRecorder) Empty(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockstateDB)(nil).Empty), arg0)
}

// EndBlock mocks base method.
func (m *MockstateDB) EndBlock(number uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndBlock", number)
}

// EndBlock indicates an expected call of EndBlock.
func (mr *MockstateDBMockRecorder) EndBlock(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndBlock", reflect.TypeOf((*MockstateDB)(nil).EndBlock), number)
}

// Error mocks base method.
func (m *MockstateDB) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockstateDBMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockstateDB)(nil).Error))
}

// Exist mocks base method.
func (m *MockstateDB) Exist(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockstateDBMockRecorder) Exist(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockstateDB)(nil).Exist), arg0)
}

// Finalise mocks base method.
func (m *MockstateDB) Finalise() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finalise")
}

// Finalise indicates an expected call of Finalise.
func (mr *MockstateDBMockRecorder) Finalise() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalise", reflect.TypeOf((*MockstateDB)(nil).Finalise))
}

// GetBalance mocks base method.
func (m *MockstateDB) GetBalance(arg0 common.Address) *uint256.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(*uint256.Int)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockstateDBMockRecorder) GetBalance(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockstateDB)(nil).GetBalance), arg0)
}

// GetCode mocks base method.
func (m *MockstateDB) GetCode(arg0 common.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockstateDBMockRecorder) GetCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockstateDB)(nil).GetCode), arg0)
}

// GetCodeHash mocks base method.
func (m *MockstateDB) GetCodeHash(arg0 common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockstateDBMockRecorder) GetCodeHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockstateDB)(nil).GetCodeHash), arg0)
}

// GetCodeSize mocks base method.
func (m *MockstateDB) GetCodeSize(arg0 common.Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockstateDBMockRecorder) GetCodeSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockstateDB)(nil).GetCodeSize), arg0)
}

// GetCommittedState mocks base method.
func (m *MockstateDB) GetCommittedState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCommittedState indicates an expected call of GetCommittedState.
func (mr *MockstateDBMockRecorder) GetCommittedState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedState", reflect.TypeOf((*MockstateDB)(nil).GetCommittedState), arg0, arg1)
}

// GetLogs mocks base method.
func (m *MockstateDB) GetLogs(hash, blockHash common.Hash) []*types.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", hash, blockHash)
	ret0, _ := ret[0].([]*types.Log)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockstateDBMockRecorder) GetLogs(hash, blockHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockstateDB)(nil).GetLogs), hash, blockHash)
}

// GetNonce mocks base method.
func (m *MockstateDB) GetNonce(arg0 common.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockstateDBMockRecorder) GetNonce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockstateDB)(nil).GetNonce), arg0)
}

// GetProof mocks base method.
func (m *MockstateDB) GetProof(addr common.Address, keys []common.Hash) (witness.Proof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProof", addr, keys)
	ret0, _ := ret[0].(witness.Proof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProof indicates an expected call of GetProof.
func (mr *MockstateDBMockRecorder) GetProof(addr, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProof", reflect.TypeOf((*MockstateDB)(nil).GetProof), addr, keys)
}

// GetRefund mocks base method.
func (m *MockstateDB) GetRefund() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefund")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRefund indicates an expected call of GetRefund.
func (mr *MockstateDBMockRecorder) GetRefund() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefund", reflect.TypeOf((*MockstateDB)(nil).GetRefund))
}

// GetState mocks base method.
func (m *MockstateDB) GetState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockstateDBMockRecorder) GetState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockstateDB)(nil).GetState), arg0, arg1)
}

// GetStorageRoot mocks base method.
func (m *MockstateDB) GetStorageRoot(addr common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageRoot", addr)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetStorageRoot indicates an expected call of GetStorageRoot.
func (mr *MockstateDBMockRecorder) GetStorageRoot(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageRoot", reflect.TypeOf((*MockstateDB)(nil).GetStorageRoot), addr)
}

// GetTransientState mocks base method.
func (m *MockstateDB) GetTransientState(addr common.Address, key common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransientState", addr, key)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetTransientState indicates an expected call of GetTransientState.
func (mr *MockstateDBMockRecorder) GetTransientState(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransientState", reflect.TypeOf((*MockstateDB)(nil).GetTransientState), addr, key)
}

// HasSelfDestructed mocks base method.
func (m *MockstateDB) HasSelfDestructed(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSelfDestructed", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSelfDestructed indicates an expected call of HasSelfDestructed.
func (mr *MockstateDBMockRecorder) HasSelfDestructed(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSelfDestructed", reflect.TypeOf((*MockstateDB)(nil).HasSelfDestructed), arg0)
}

// PointCache mocks base method.
func (m *MockstateDB) PointCache() *utils.PointCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PointCache")
	ret0, _ := ret[0].(*utils.PointCache)
	return ret0
}

// PointCache indicates an expected call of PointCache.
func (mr *MockstateDBMockRecorder) PointCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PointCache", reflect.TypeOf((*MockstateDB)(nil).PointCache))
}

// Prepare mocks base method.
func (m *MockstateDB) Prepare(rules params.Rules, sender, coinbase common.Address, dest *common.Address, precompiles []common.Address, txAccesses types.AccessList) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Prepare", rules, sender, coinbase, dest, precompiles, txAccesses)
}

// Prepare indicates an expected call of Prepare.
func (mr *MockstateDBMockRecorder) Prepare(rules, sender, coinbase, dest, precompiles, txAccesses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockstateDB)(nil).Prepare), rules, sender, coinbase, dest, precompiles, txAccesses)
}

// Release mocks base method.
func (m *MockstateDB) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockstateDBMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockstateDB)(nil).Release))
}

// RevertToSnapshot mocks base method.
func (m *MockstateDB) RevertToSnapshot(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevertToSnapshot", arg0)
}

// RevertToSnapshot indicates an expected call of RevertToSnapshot.
func (mr *MockstateDBMockRecorder) RevertToSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertToSnapshot", reflect.TypeOf((*MockstateDB)(nil).RevertToSnapshot), arg0)
}

// SelfDestruct mocks base method.
func (m *MockstateDB) SelfDestruct(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SelfDestruct", arg0)
}

// SelfDestruct indicates an expected call of SelfDestruct.
func (mr *MockstateDBMockRecorder) SelfDestruct(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct", reflect.TypeOf((*MockstateDB)(nil).SelfDestruct), arg0)
}

// Selfdestruct6780 mocks base method.
func (m *MockstateDB) Selfdestruct6780(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Selfdestruct6780", arg0)
}

// Selfdestruct6780 indicates an expected call of Selfdestruct6780.
func (mr *MockstateDBMockRecorder) Selfdestruct6780(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Selfdestruct6780", reflect.TypeOf((*MockstateDB)(nil).Selfdestruct6780), arg0)
}

// SetBalance mocks base method.
func (m *MockstateDB) SetBalance(addr common.Address, amount *uint256.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBalance", addr, amount)
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockstateDBMockRecorder) SetBalance(addr, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockstateDB)(nil).SetBalance), addr, amount)
}

// SetCode mocks base method.
func (m *MockstateDB) SetCode(arg0 common.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockstateDBMockRecorder) SetCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockstateDB)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockstateDB) SetNonce(arg0 common.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockstateDBMockRecorder) SetNonce(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockstateDB)(nil).SetNonce), arg0, arg1)
}

// SetState mocks base method.
func (m *MockstateDB) SetState(arg0 common.Address, arg1, arg2 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1, arg2)
}

// SetState indicates an expected call of SetState.
func (mr *MockstateDBMockRecorder) SetState(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockstateDB)(nil).SetState), arg0, arg1, arg2)
}

// SetStorage mocks base method.
func (m *MockstateDB) SetStorage(addr common.Address, storage map[common.Hash]common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStorage", addr, storage)
}

// SetStorage indicates an expected call of SetStorage.
func (mr *MockstateDBMockRecorder) SetStorage(addr, storage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStorage", reflect.TypeOf((*MockstateDB)(nil).SetStorage), addr, storage)
}

// SetTransientState mocks base method.
func (m *MockstateDB) SetTransientState(addr common.Address, key, value common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransientState", addr, key, value)
}

// SetTransientState indicates an expected call of SetTransientState.
func (mr *MockstateDBMockRecorder) SetTransientState(addr, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransientState", reflect.TypeOf((*MockstateDB)(nil).SetTransientState), addr, key, value)
}

// SetTxContext mocks base method.
func (m *MockstateDB) SetTxContext(thash common.Hash, ti int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTxContext", thash, ti)
}

// SetTxContext indicates an expected call of SetTxContext.
func (mr *MockstateDBMockRecorder) SetTxContext(thash, ti any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTxContext", reflect.TypeOf((*MockstateDB)(nil).SetTxContext), thash, ti)
}

// SlotInAccessList mocks base method.
func (m *MockstateDB) SlotInAccessList(addr common.Address, slot common.Hash) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotInAccessList", addr, slot)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SlotInAccessList indicates an expected call of SlotInAccessList.
func (mr *MockstateDBMockRecorder) SlotInAccessList(addr, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotInAccessList", reflect.TypeOf((*MockstateDB)(nil).SlotInAccessList), addr, slot)
}

// Snapshot mocks base method.
func (m *MockstateDB) Snapshot() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(int)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockstateDBMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockstateDB)(nil).Snapshot))
}

// SubBalance mocks base method.
func (m *MockstateDB) SubBalance(arg0 common.Address, arg1 *uint256.Int, arg2 tracing.BalanceChangeReason) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubBalance", arg0, arg1, arg2)
}

// SubBalance indicates an expected call of SubBalance.
func (mr *MockstateDBMockRecorder) SubBalance(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubBalance", reflect.TypeOf((*MockstateDB)(nil).SubBalance), arg0, arg1, arg2)
}

// SubRefund mocks base method.
func (m *MockstateDB) SubRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubRefund", arg0)
}

// SubRefund indicates an expected call of SubRefund.
func (mr *MockstateDBMockRecorder) SubRefund(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubRefund", reflect.TypeOf((*MockstateDB)(nil).SubRefund), arg0)
}

// TxIndex mocks base method.
func (m *MockstateDB) TxIndex() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxIndex")
	ret0, _ := ret[0].(int)
	return ret0
}

// TxIndex indicates an expected call of TxIndex.
func (mr *MockstateDBMockRecorder) TxIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxIndex", reflect.TypeOf((*MockstateDB)(nil).TxIndex))
}

// Witness mocks base method.
func (m *MockstateDB) Witness() *stateless.Witness {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Witness")
	ret0, _ := ret[0].(*stateless.Witness)
	return ret0
}

// Witness indicates an expected call of Witness.
func (mr *MockstateDBMockRecorder) Witness() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Witness", reflect.TypeOf((*MockstateDB)(nil).Witness))
}
