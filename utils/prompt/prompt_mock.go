// Code generated by MockGen. DO NOT EDIT.
// Source: prompt.go
//
// Generated by this command:
//
//	mockgen -source prompt.go -destination prompt_mock.go -package prompt
//

// Package prompt is a generated GoMock package.
package prompt

import (
	reflect "reflect"

	prompt "github.com/ethereum/go-ethereum/console/prompt"
	gomock "go.uber.org/mock/gomock"
)

// MockUserPrompter is a mock of UserPrompter interface.
type MockUserPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockUserPrompterMockRecorder
}

// MockUserPrompterMockRecorder is the mock recorder for MockUserPrompter.
type MockUserPrompterMockRecorder struct {
	mock *MockUserPrompter
}

// NewMockUserPrompter creates a new mock instance.
func NewMockUserPrompter(ctrl *gomock.Controller) *MockUserPrompter {
	mock := &MockUserPrompter{ctrl: ctrl}
	mock.recorder = &MockUserPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPrompter) EXPECT() *MockUserPrompterMockRecorder {
	return m.recorder
}

// AppendHistory mocks base method.
func (m *MockUserPrompter) AppendHistory(command string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendHistory", command)
}

// AppendHistory indicates an expected call of AppendHistory.
func (mr *MockUserPrompterMockRecorder) AppendHistory(command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendHistory", reflect.TypeOf((*MockUserPrompter)(nil).AppendHistory), command)
}

// ClearHistory mocks base method.
func (m *MockUserPrompter) ClearHistory() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearHistory")
}

// ClearHistory indicates an expected call of ClearHistory.
func (mr *MockUserPrompterMockRecorder) ClearHistory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearHistory", reflect.TypeOf((*MockUserPrompter)(nil).ClearHistory))
}

// PromptConfirm mocks base method.
func (m *MockUserPrompter) PromptConfirm(prompt string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptConfirm", prompt)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptConfirm indicates an expected call of PromptConfirm.
func (mr *MockUserPrompterMockRecorder) PromptConfirm(prompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptConfirm", reflect.TypeOf((*MockUserPrompter)(nil).PromptConfirm), prompt)
}

// PromptInput mocks base method.
func (m *MockUserPrompter) PromptInput(prompt string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptInput", prompt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptInput indicates an expected call of PromptInput.
func (mr *MockUserPrompterMockRecorder) PromptInput(prompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptInput", reflect.TypeOf((*MockUserPrompter)(nil).PromptInput), prompt)
}

// PromptPassword mocks base method.
func (m *MockUserPrompter) PromptPassword(prompt string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptPassword", prompt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptPassword indicates an expected call of PromptPassword.
func (mr *MockUserPrompterMockRecorder) PromptPassword(prompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptPassword", reflect.TypeOf((*MockUserPrompter)(nil).PromptPassword), prompt)
}

// SetHistory mocks base method.
func (m *MockUserPrompter) SetHistory(history []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHistory", history)
}

// SetHistory indicates an expected call of SetHistory.
func (mr *MockUserPrompterMockRecorder) SetHistory(history any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHistory", reflect.TypeOf((*MockUserPrompter)(nil).SetHistory), history)
}

// SetWordCompleter mocks base method.
func (m *MockUserPrompter) SetWordCompleter(completer prompt.WordCompleter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWordCompleter", completer)
}

// SetWordCompleter indicates an expected call of SetWordCompleter.
func (mr *MockUserPrompterMockRecorder) SetWordCompleter(completer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWordCompleter", reflect.TypeOf((*MockUserPrompter)(nil).SetWordCompleter), completer)
}
